#0706
01-2: 함수 오버로딩(Function Overloading)

C++에서는 매개변수의 선언형태가 다르면, 동일한 이름의 함수정의를 허용함
->함수호출 시 전달되는 인자를 통해서 호출하고자 하는 함수의 구분이 가능하기 때문

C++
-> 두 개의 int형 정수를 인자로 전달받을 수 있는 MyFunc라는 이름의 함수를 찾는다. 
C
->함수의 이름만 이용해서 호출대상을 찾는다.=>함수의 오버로딩 불가능

함수의 오버로딩 조건
->매개변수의 자료형 또는 개수가 다르다.
ex) int MyFunc(char a) & int MyFunc(int n)
또는 int MyFunc(int a) & int MyFunc(int x, int y)

함수의 오버로딩 불가 예
-> void MyFunc(int n) & int MyFunc(int n)
=> 두 함수는 반환형이 다르다. 그러나 반환형은 함수호출 시, 호출되는 함수를 구분하는 기준이 될 수 없다. (컴파일 오류 발생)

*포인터 공부 필요

01-3 매개변수의 디폴트 값(Default Value)
디폴트 값 = 기본적으로 설정되어 있는 값 

01-4 인라인 함수(Inline Function)
inline 함수 = 프로그램 코드라인 안으로 들어가 버린 함수 

매크로 함수의 장점
-일반적인 함수에 비해서 실행속도의 이점이 있다.
매크로 함수의 단점
-정의하기가 어렵다. 복잡한 함수를 매크로의 형태로 정의하는데 한계가 있다.

>>함수의 몸체부분이 함수호출 문장을 완전히 대체했을 때 '함수가 인라인화 되었다.' 라고 표현한다. 
ex) 
#include<iostream>
#define SQUARE(x) ((x)*(x))
int main(void){
	std::cout<<SQUARE(5)<<std::endl;;
	return 0;
}

#include<iostream>
int main(void){
	sd::cout<<((5)*(5))<<std::endl;
	return 0;
}

01-5 이름공간에 대한 소개(namespace)
=특정 영역에 이름을 붙여주기 위한 문법적 요소 / 이름을 붙여놓은 공간

namespace 등장배경
>>프로그램이 대형화되어 가면서 이름의 충돌문제가 등장
ex) 프로젝트 부분을 나누어서 구현했는데 합칠 때 정의한 함수의 이름이 겹칠 경우 충돌 발생

namespace 기본원리
namespace BestComImp1{
}
>>'BestComImp1'의 이름공간의 이름 
자신만의 이름공간을 만들고 이 안에 함수를 정의하거나 변수를 선언하면 충돌이 발생하지 않는다. 
