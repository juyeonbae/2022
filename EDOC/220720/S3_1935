#1935
"""
문제 설명
후위 표기식과 각 피연산자에 대응하는 값들이 주어져 있을 때, 그 식을 계산하는 프로그램을 작성하시오

입력
첫째 줄에 피연산자의 개수 (1 ≤ N ≤ 26) 가 주어진다.
둘째 줄에 후위 표기식이 주어진다.
(피연산자는 A~Z의 영대문자이며, A부터 순서대로 N개의 영대문자만 사용되며, 길이는 100을 넘지 않는다.)
셋째 줄부터 N+2번째 줄까지는 각 피연산자에 대응하는 값이 주어진다.
3번째 줄에는 A에 해당하는 값, 4번째 줄에는 B에 해당하는 값, 5번째 줄에는 C에 해당하는 값~
(피연산자에 대응하는 값은 100보다 작거나 같은 자연수)

출력
계산 결과를 소숫점 둘째 자리까지 출력한다.

후위 표기식 계산 방법 
1. 숫자는 스택에 그냥 추가
2. 연산자가 나오면 숫자 2개를 pop 해서 계산
3. 이때 먼저 pop 되는 숫자가 두 번째 값, 나중에 pop 되는 숫자가 첫 번째 값으로 하여 계산
4. 계산한 값은 다시 스택에 넣는다.
(A=1,B=2,C=3,D=4,E=5)
ex) ABC*+DE/-
ABC => x[0] = 1/x[1]=2/x[2]=3 연산자 나올 때까지 스택 삽입 
* => x[1]*x[2] = 6 -> x[1]=6 다시 삽입 => x[0]=1/x[1]=6
+ => x[0]+x[1] = 7 -> x[0] = 7 다시 삽입
DE => x[1]=4,x[2]=5 -> x[0]=7/x[1]=4/x[2]=/5 연산자 나올 때까지 스택 삽입
/ => x[1]/x[2]= 0.8 (나중에 pop 되는 숫자가 첫번째 값->다시 스택 삽입)
(x[0]=7/x[1]=0.8)
- => x[0]-x[1]= 6.20 (소수점 둘째 자리까지 출력)
"""

#1935

N = int(input())                #피연산자 개수 
x = input()                  #후위 표기식 - 문자로 받음 
num = [0]*N                     #피연산자 개수만큼 대응값 삽입할 리스트 생성

for i in range(N):              #피연산자 개수만큼 반복 
    num[i] = int(input())       #피연산자 대응값 리스트  삽입 

stack = []                      #후위 표기식 계산할 리스트 생성 

for i in x:
    if 'A' <= i <= 'Z':         #피연산자인지 확인 
        stack.append(num[ord(i)-ord('A')]) #ord 아스키코드 숫자로 변경 함수
    else:
        n2 = stack.pop()        #나중에 pop되는 숫자가 연산의 첫번째 값 
        n1 = stack.pop()

        if i == '+':            #연산자 
            stack.append(n1+n2)
        elif i == '-':
            stack.append(n1-n2)
        elif i == '*':
            stack.append(n1*n2)
        elif i == '/':
            stack.append(n1/n2)

print(format(stack[0],".2f"))
#format(실수, ".표기할 자리수f")
